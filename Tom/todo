COMPLETED
- Create a class for the user
- Create a class for the recipe
- Create a class for the diets
- Re-organise recipe for Json loading and make it so it reads in as a string then during initalisation loops through and grabs ingredient 
- JSON save a load system for all data that is needed in the program 
- Move Ingredients into a seperate Json file, and have a pointer in recipes to them
- Come up with a better name then tempName 
- Look over bbc good foods and decide all the tags we want 
- Look into moving diet out of tags in recipes for easier referencing 
- Search system : Make it so the only recipes displayed are ones that are on your diet plan , unless selected otherwise
- Look into tags dont think they need to be a class
- Look into splitting recipes into diet types so we know how many we have for each 
- Saving new user : need to make it check if there already a foler with the same name before saving to avoid errors
- ORGANISATION : Reorganise recipe Json and class
- ORGANISATION/CODE : Change the folder structure of users so it includes a folder id instead of using the name so when a user is being created its folder can be created straight away 
- ORGANISATION : make the jsons file name also the id 
- Create a way to link tag / diet icons to the tags and diets of recipes : essentially make a data strucutre which holds the name of the diet / tag and the image associated with it this funciton is called before the recipe page and return this data structure  
- Fix userid and folder creation if a user is deleted that isnt the last one
- Users can be deleted 
- ORGANISATION : Put all the data type functions together 
- WIKI : Add table of contents 
- Move circular image frame into tools
- TESTING : Add more user testing especially around deleting 
- Remove all setters from recipes 


IN PROGRESS
- TESTING : Look over current testing 
- TESTING : In the testing tools write some code that can determine whether a file is in a folder or not 
- Clean up files
- Add proper icons for the rest of the diets and add the paths to the constants file 
- Re-organise wiki to arrange it for the important classes as well as add a table of contents
- Add all the recipes 
- Continue creation of functions to help speed up the GUI creation 
- Code clean up targeting un-used variables and functions
- Code clean up targeting pathing changing static paths to use Pointers class 
- Code clean up targeting commenting and readability  


TODO
- User manager update all the functions to use the Tools.HasImage if they are dealing with an image
- TESTING : USER : Add more user tests todo with functions in the UserManager class
- Update wiki 
- Change the default image for recipes and diets 
- Functions for family viewing to grab users data and 4 favourite recipes , make sure to delete user after 
- APP : Go through app and do if statements for apple computers to keep ui elements within frame // if(System.getProperty("os.name").contains("Mac"))
- APP :  make it so it loads the cirularised image into the program in new user creation section 
- TOOLS/USERMANAGER : clean up the way handle temporary profile image 
- Rename datastructure variables to make them more general 
- Tech Debt 
- APP : Talk to Josh about which page the program loads when there are no users in the system can either go straight into the user creation screen or to the menu so they click add new user 
- ORGANISATION : ook over all the functions in the classes and see if they can be organised and paired together in a better way 
- Creation of a user allow them to upload a profile picture and reuse that code for users wanting to change theirs
- Dynamic pointer in Pointers class for current user so dont have to keep creating path
- Search via ingredients feature where the user enters the ingredient and quantity and will search for recipes which have those ingredients or most of them 90% is limit, populate the ingredient list while they are typing select an ingredient then add a quantity and when they are done press search 
- Look over running through recipes and checking if they are low in fat or whatever and then add a tag to them and save it 
- APP : newUserProfile frame : Date of birth (d/m/y) input validation 
- APP : newUserProfile frame : Back button to go to Login frame
- APP : newUserProfile frame : Create Password option requirinig a password to be entered twice if user wants one
- APP : newUserProfile frame : Add a text limit to the name input
- APP : password frame : Need to redesign the password frame to look better keep it the same size as the Login frame
- USER MANAGER : Go over code and make it error proof adding try and excepts where needed
- APP : Make it so frame stays at the position of the old frame when a new frame is instansiated
- APP : Back button doesn't hide last frame 
- TOOLS : Check through nutrient and give each one a colour green , yellow or red based on the amount 
- APP : Change password from being a field to a JPasswordField
- TESTING : UserID generater bugged in some user id configurations need to test
- MEMORY : Look over UserManger functions and other functions and make sure no memory leaks 
- USER MANGER : Get rid of scaleProfileImage(imageIcon); when josh has made the new gui as not needed
- USER MANAGER : Look over function names and re-name them to be more concise (then change the wiki)
- USER MANAGER : Change from using ImageIcon to Image to prevent extra line of code 
- Recipes / Diets : when all the recipes are in place for each diet have code to run over and get the mean calories for each diet 



RESEARCH
- use cards to contain the recipe breif details for searching
- Look into net beans to modernise and refine the GUI and other parts such as recipe stuff 
- Look into using css with java 22
- Dont have a recipe hava a way for the user to paste in the url of the cooking website and run a python program to load it in 
